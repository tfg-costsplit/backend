{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "COSTSPLIT API",
    "version" : ""
  },
  "paths" : {
    "/auth/create" : {
      "post" : {
        "tags" : [ ],
        "summary" : "Create an user in the database with pending verification",
        "description" : "\n            An unverified user can only store account details in the server.\n            An unverified user may join a group trough an invite, but it won't be able to add purchases.\n            An unverified user may have their account details, including the password, modified if another request for registering is done with the same email.\n            Returns a JWT for future requests.\n        ",
        "operationId" : "createUser",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateUser"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "User data and JWT for authenticating in future requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserData"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ ]
      }
    },
    "/auth/verify" : {
      "post" : {
        "tags" : [ ],
        "summary" : "Log a user in",
        "description" : "\n            Log a user into the server trough authentication credentials and return a JWT for future requests.\n        ",
        "operationId" : "loginUser",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Login"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "User data and JWT for authenticating in future requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserData"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ ]
      }
    },
    "/auth/verify/{token}" : {
      "get" : {
        "tags" : [ ],
        "summary" : "Confirm the email of an account",
        "description" : "\n            Confirm the email of an account.\n        ",
        "operationId" : "verifyUser",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Auth JWT",
          "required" : false,
          "deprecated" : false,
          "allowEmptyValue" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Account confirmation response",
            "content" : {
              "text/html" : { }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ ]
      }
    },
    "/group" : {
      "post" : {
        "tags" : [ ],
        "summary" : "Create a new group",
        "description" : "\n            Create an empty group for the user and return the group id\n        ",
        "operationId" : "createGroup",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Group name",
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Group id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/group-data/{id}" : {
      "get" : {
        "tags" : [ ],
        "summary" : "Get all the data of a group",
        "description" : "\n            Retrieve id, name, payments, and the respective purchases of a group\n        ",
        "operationId" : "getAllGroupData",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group id",
          "required" : false,
          "deprecated" : false,
          "allowEmptyValue" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Group data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AllGroupData"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/group-invite/{id}" : {
      "get" : {
        "tags" : [ ],
        "summary" : "Generate an invite for a group",
        "description" : "\n            Generate an invite token for a group.\n            The endpoint for accepting the invite is \"/group-join/{token}\".\n            The token expires after one week.\n        ",
        "operationId" : "getGroupInvite",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group id",
          "required" : false,
          "deprecated" : false,
          "allowEmptyValue" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Invite token",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/group-join/{token}" : {
      "post" : {
        "tags" : [ ],
        "summary" : "Join a group",
        "description" : "\n            Makes an user join a group.\n        ",
        "operationId" : "joinGroup",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Invite token",
          "required" : false,
          "deprecated" : false,
          "allowEmptyValue" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Id of the joined group",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/group/{id}" : {
      "get" : {
        "tags" : [ ],
        "summary" : "Get the data of a group",
        "description" : "\n            Retrieve id, name, and payment ids of a group\n        ",
        "operationId" : "getGroupData",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group id",
          "required" : false,
          "deprecated" : false,
          "allowEmptyValue" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Group data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupData"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/purchase" : {
      "post" : {
        "tags" : [ ],
        "summary" : "Create a purchase",
        "description" : "\n            Store a purchase and how it's supposed to be paid.\n            The user must be a member of the provided group.\n        ",
        "operationId" : "createPurchase",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddPurchase"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Purchase id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/purchase/{id}" : {
      "post" : {
        "tags" : [ ],
        "summary" : "Update a purchase",
        "description" : "\n            Update a purchase and how it's supposed to be paid.\n            The user must be a member of the provided group.\n        ",
        "operationId" : "updatePurchase",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the purchase",
          "required" : false,
          "deprecated" : false,
          "allowEmptyValue" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePurchase"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      },
      "get" : {
        "tags" : [ ],
        "summary" : "Get information about a purchase",
        "description" : "\n            Get all the information related to a purchase\n        ",
        "operationId" : "getPurchaseData",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the purchase",
          "required" : false,
          "deprecated" : false,
          "allowEmptyValue" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurchaseData"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "AddPurchase" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "groupId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "payments" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/PayEntry"
            }
          }
        },
        "required" : [ "groupId", "description", "payments" ]
      },
      "AllGroupData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserInfo"
            }
          },
          "purchases" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PurchaseData"
            }
          }
        },
        "required" : [ "id", "name", "users", "purchases" ]
      },
      "CreateUser" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        },
        "required" : [ "name", "email", "password" ]
      },
      "GroupData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "purchases" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "required" : [ "id", "name", "users", "purchases" ]
      },
      "JsonErrorResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "title" : {
            "type" : "string"
          },
          "status" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "details" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "title", "status", "type", "details" ]
      },
      "Login" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "password" ]
      },
      "PayEntry" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : { }
      },
      "PurchaseData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "payer" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "payments" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/PayEntry"
            }
          }
        },
        "required" : [ "id", "payer", "description", "payments" ]
      },
      "UpdatePurchase" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "payments" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/PayEntry"
            },
            "nullable" : true
          },
          "payer" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "UserData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "required" : [ "id", "name", "email", "token", "groups" ]
      },
      "UserInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          }
        },
        "required" : [ "id", "name" ]
      }
    },
    "securitySchemes" : {
      "BearerAuth" : {
        "scheme" : "bearer",
        "type" : "http"
      }
    }
  },
  "servers" : [ ],
  "security" : [ ]
}