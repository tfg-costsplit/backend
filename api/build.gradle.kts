/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("buildlogic.java-conventions")
    id("org.openapi.generator") version "7.12.0"
    java
    `maven-publish`
    signing
    id("org.jreleaser") version "1.18.0"
}

sourceSets {
    main {
        java {
            srcDir(layout.buildDirectory.dir("generate-resources/main/src/main/java"))
        }
    }
}

openApiGenerate {
    inputSpec = "$projectDir/src/main/resources/openapi.json"
    generatorName = "java"
    apiPackage = "io.github.costsplit.api"
    invokerPackage = "io.github.costsplit.api.invoker"
    groupId = "io.github.costsplit"
    artifacts {
        id = "api"
    }
    modelPackage = "io.github.costsplit.api.model"
    library = "native"
    skipValidateSpec = true
}

description = "api"

val jacksonVersion = "2.17.1"
val jakartaAnnotationVersion = "1.3.5"
val beanValidationVersion = "2.0.2"
val junitVersion = "5.10.2"

publishing {
    publications {
        create<MavenPublication>("maven") {
            groupId = "io.github.tfg-costsplit"
            artifactId = "api"
            version = project.findProperty("version") as String? ?: "0.1.0-SNAPSHOT"

            from(components["java"])

            pom {
                name.set("api")
                description.set("costsplit java api")
                url.set("https://github.com/yourname/yourproject")

                licenses {
                    license {
                        name.set("GPL3")
                        url.set("https://www.gnu.org/licenses/gpl-3.0.txt")
                    }
                }

                developers {
                    developer {
                        name.set("Aimar Ibarra")
                        email.set("aimar_ibarra@proton.me")
                    }
                }

                scm {
                    connection.set("scm:git:https://github.com/tfg-costsplit/backend.git")
                    developerConnection.set("scm:git:ssh://git@github.com:tfg-costsplit/backend.git")
                    url.set("https://github.com/tfg-costsplit/backend")
                }
            }
        }
    }
    repositories {
        maven {
            name = "CentralPortal"
            url = uri("https://central.sonatype.com/api/v1/publisher")
            credentials {
                username = System.getenv("MAVEN_REPO_USER")
                password = System.getenv("MAVEN_REPO_PASS")
            }
        }
    }
}

jreleaser {
    signing {
        setActive("ALWAYS")
        armored.set(true)
        publicKey.set(System.getenv("GPG_PUBLIC_KEY"))
        secretKey.set(System.getenv("GPG_SECRET_KEY"))
        passphrase.set(System.getenv("GPG_PASSPHRASE"))
    }
    deploy {
        maven {
            mavenCentral {
                create("sonatype") {
                    setActive("ALWAYS")
                    username.set("SONATYPE_USERNAME")
                    password.set("SONATYPE_PASSWORD")
                    url.set("https://central.sonatype.com/api/v1/publisher")
                    stagingRepository("target/staging-deploy")
                }
            }
        }
    }
}

signing {
    val signingKey: String? by project
    val signingPassword: String? by project
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign(publishing.publications["maven"])
}

dependencies {
    implementation("com.google.code.findbugs:jsr305:3.0.2")
    implementation("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
    implementation("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    implementation("org.openapitools:jackson-databind-nullable:0.2.1")
    implementation("jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
}

tasks.compileJava {
    dependsOn(tasks.openApiGenerate)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

